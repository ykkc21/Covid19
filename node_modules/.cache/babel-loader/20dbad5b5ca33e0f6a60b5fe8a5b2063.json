{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/GitHub/Covid19/src/components/Chart/Chart.js\";\nimport ApexCharts from \"react-apexcharts\";\nimport $ from 'jquery';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart() {\n  const data = JSON.parse(window.localStorage.getItem('total'));\n  const deathCntData = [];\n  const decideCntData = [];\n  const createDtData = [];\n  data.forEach(element => {\n    deathCntData.push(element.deathCnt);\n    decideCntData.push(element.decideCnt);\n    createDtData.push(element.createDt);\n  });\n  const decideCnt = decideCntData.map(e => {\n    return `${e}명`;\n  });\n  const day = createDtData.map(e => {\n    const month = e.split(\"-\")[1];\n    const day = e.split('-')[2].split(\" \")[0];\n    return `${month}월 ${day}일`;\n  });\n  console.log(deathCntData, decideCntData, day);\n  const opstions = {\n    chart: {\n      type: 'bar'\n    },\n    series: [{\n      name: \"사망자\",\n      data: deathCntData.sort()\n    }, {\n      name: \"확진자\",\n      data: decideCnt.sort()\n    }],\n    xaxis: {\n      categories: day.sort()\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '55%',\n        endingShape: 'rounded'\n      }\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent']\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ApexCharts, {\n      options: opstions,\n      series: opstions.series,\n      type: \"bar\",\n      width: \"700px\",\n      height: \"300px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 12\n  }, this);\n}\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/user/Documents/GitHub/Covid19/src/components/Chart/Chart.js"],"names":["ApexCharts","$","Chart","data","JSON","parse","window","localStorage","getItem","deathCntData","decideCntData","createDtData","forEach","element","push","deathCnt","decideCnt","createDt","map","e","day","month","split","console","log","opstions","chart","type","series","name","sort","xaxis","categories","plotOptions","bar","horizontal","columnWidth","endingShape","stroke","show","width","colors"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,CAAP,MAAc,QAAd;;;AACA,SAASC,KAAT,GAAiB;AAEb,QAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAX,CAAb;AACA,QAAMC,YAAY,GAAG,EAArB;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,YAAY,GAAG,EAArB;AAEAR,EAAAA,IAAI,CAACS,OAAL,CAAaC,OAAO,IAAI;AACpBJ,IAAAA,YAAY,CAACK,IAAb,CAAkBD,OAAO,CAACE,QAA1B;AACAL,IAAAA,aAAa,CAACI,IAAd,CAAmBD,OAAO,CAACG,SAA3B;AACAL,IAAAA,YAAY,CAACG,IAAb,CAAkBD,OAAO,CAACI,QAA1B;AACH,GAJD;AAMA,QAAMD,SAAS,GAAGN,aAAa,CAACQ,GAAd,CAAmBC,CAAD,IAAO;AACvC,WAAQ,GAAEA,CAAE,GAAZ;AACH,GAFiB,CAAlB;AAIA,QAAMC,GAAG,GAAGT,YAAY,CAACO,GAAb,CAAkBC,CAAD,IAAO;AAClC,UAAME,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQ,GAAR,EAAa,CAAb,CAAd;AACA,UAAMF,GAAG,GAAGD,CAAC,CAACG,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBA,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAZ;AACA,WAAQ,GAAED,KAAM,KAAID,GAAI,GAAxB;AACD,GAJW,CAAZ;AAMJG,EAAAA,OAAO,CAACC,GAAR,CAAYf,YAAZ,EAA0BC,aAA1B,EAAyCU,GAAzC;AAEI,QAAMK,QAAQ,GAAG;AACfC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KADQ;AAIfC,IAAAA,MAAM,EAAE,CAAC;AACPC,MAAAA,IAAI,EAAE,KADC;AAEP1B,MAAAA,IAAI,EAAEM,YAAY,CAACqB,IAAb;AAFC,KAAD,EAIV;AACED,MAAAA,IAAI,EAAE,KADR;AAEE1B,MAAAA,IAAI,EAAEa,SAAS,CAACc,IAAV;AAFR,KAJU,CAJO;AAYjBC,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEZ,GAAG,CAACU,IAAJ;AADP,KAZU;AAejBG,IAAAA,WAAW,EAAE;AACXC,MAAAA,GAAG,EAAE;AACHC,QAAAA,UAAU,EAAE,KADT;AAEHC,QAAAA,WAAW,EAAE,KAFV;AAGHC,QAAAA,WAAW,EAAE;AAHV;AADM,KAfI;AAsBjBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,KAAK,EAAE,CAFD;AAGNC,MAAAA,MAAM,EAAE,CAAC,aAAD;AAHF;AAtBS,GAAjB;AA6BA,sBAAO;AAAA,2BACJ,QAAC,UAAD;AACA,MAAA,OAAO,EAAEhB,QADT;AAEA,MAAA,MAAM,EAAEA,QAAQ,CAACG,MAFjB;AAGA,MAAA,IAAI,EAAC,KAHL;AAIA,MAAA,KAAK,EAAC,OAJN;AAKA,MAAA,MAAM,EAAC;AALP;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,UAAP;AASH;;KA/DQ1B,K;AAgET,eAAeA,KAAf","sourcesContent":["import ApexCharts from \"react-apexcharts\";\nimport $ from 'jquery';\nfunction Chart() {\n\n    const data = JSON.parse(window.localStorage.getItem('total'));\n    const deathCntData = [];\n    const decideCntData = [];\n    const createDtData = [];\n\n    data.forEach(element => {\n        deathCntData.push(element.deathCnt);\n        decideCntData.push(element.decideCnt);\n        createDtData.push(element.createDt);\n    });\n\n    const decideCnt = decideCntData.map((e) => {\n        return `${e}명`;\n    });\n\n    const day = createDtData.map((e) => {\n      const month = e.split(\"-\")[1];\n      const day = e.split('-')[2].split(\" \")[0];\n      return `${month}월 ${day}일`;\n    });\n\nconsole.log(deathCntData, decideCntData, day)\n\n    const opstions = {\n      chart: {\n        type: 'bar'\n      },\n      series: [{\n        name: \"사망자\",\n        data: deathCntData.sort()\n      },\n    {\n      name: \"확진자\",\n      data: decideCnt.sort()\n    }],\n    xaxis: {\n      categories: day.sort(),\n    },\n    plotOptions: {\n      bar: {\n        horizontal: false,\n        columnWidth: '55%',\n        endingShape: 'rounded'\n      },\n    },\n    stroke: {\n      show: true,\n      width: 2,\n      colors: ['transparent']\n    },\n    }\n\n    return <div>\n       <ApexCharts\n       options={opstions}\n       series={opstions.series}\n       type=\"bar\"\n       width=\"700px\"\n       height=\"300px\"\n     />\n    </div> \n}\nexport default Chart;"]},"metadata":{},"sourceType":"module"}