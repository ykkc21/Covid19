{"ast":null,"code":"var _jsxFileName = \"/Users/user/Documents/GitHub/Covid19/src/routes/Vaccination.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\"; // import MapElement from \"../components/Map/Map\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Vaccination() {\n  _s();\n\n  const {\n    kakao\n  } = window;\n  const Key = \"ni1KPPPSl7rn5wXOSl9YieknHyh6P%2Fk8wXj4aOPMa4BxknTBR71SKg8rboxd1MyzRoMU3uNHxaOCfev05Bcn5A%3D%3D\";\n  const [data, SetData] = useState([]);\n  useEffect(() => {\n    let latitude;\n    let longitude;\n    navigator.geolocation.watchPosition(pos => {\n      latitude = pos.coords.latitude;\n      longitude = pos.coords.longitude;\n      let max_latitude = latitude += 0.01 * 1;\n      let min_latitude = latitude -= 0.01 * 1;\n      let max_longitude = longitude += 0.015 * 1;\n      let min_longitude = longitude -= 0.015 * 1; // Maps.Draw(\n      //   latitude,\n      //   longitude,\n      //   max_latitude,\n      //   min_latitude,\n      //   max_longitude,\n      //   min_longitude\n      // );\n    });\n    console.log(latitude, longitude);\n    Maps.init();\n  }, []);\n  const Maps = {\n    item: [],\n\n    init() {\n      this.getDate();\n    },\n\n    async getDate() {\n      const data = await (await fetch(`https://api.odcloud.kr/api/15077586/v1/centers?page=1&perPage=400&returnType=json&serviceKey=${Key}`)).json();\n      SetData(data.data);\n      this.item = data.data;\n    },\n\n    Draw(lat, long, Maxlat, Minlat, Maxlong, Minlong) {\n      const container = document.getElementById(\"map\");\n      const options = {\n        center: new kakao.maps.LatLng(lat, long),\n        level: 3\n      };\n      var map = new kakao.maps.Map(container, options);\n      var markerPosition = new kakao.maps.LatLng(lat, long);\n      var marker = new kakao.maps.Marker({\n        position: markerPosition\n      });\n      marker.setMap(map); // 마커 지도위에 그리기\n\n      this.item.forEach(item => {\n        const lat = item.lat;\n        const long = item.lng; // console.log(long);\n\n        if (lat > Minlat && lat < Maxlat) {\n          console.log(item);\n        }\n      });\n    }\n\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Map_wrap\",\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: \"100%\",\n        height: \"100vh\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Vaccination, \"5bWMJ8+QXfglENJgHVyCVZn6AFk=\");\n\n_c = Vaccination;\nexport default Vaccination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vaccination\");","map":{"version":3,"sources":["/Users/user/Documents/GitHub/Covid19/src/routes/Vaccination.js"],"names":["useEffect","useState","Vaccination","kakao","window","Key","data","SetData","latitude","longitude","navigator","geolocation","watchPosition","pos","coords","max_latitude","min_latitude","max_longitude","min_longitude","console","log","Maps","init","item","getDate","fetch","json","Draw","lat","long","Maxlat","Minlat","Maxlong","Minlong","container","document","getElementById","options","center","maps","LatLng","level","map","Map","markerPosition","marker","Marker","position","setMap","forEach","lng","width","height"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\n// import MapElement from \"../components/Map/Map\";\nfunction Vaccination() {\n  const { kakao } = window;\n  const Key =\n    \"ni1KPPPSl7rn5wXOSl9YieknHyh6P%2Fk8wXj4aOPMa4BxknTBR71SKg8rboxd1MyzRoMU3uNHxaOCfev05Bcn5A%3D%3D\";\n  const [data, SetData] = useState([]);\n\n  useEffect(() => {\n    let latitude;\n    let longitude;\n    navigator.geolocation.watchPosition((pos) => {\n      latitude = pos.coords.latitude;\n      longitude = pos.coords.longitude;\n\n      let max_latitude = (latitude += 0.01 * 1);\n      let min_latitude = (latitude -= 0.01 * 1);\n      let max_longitude = (longitude += 0.015 * 1);\n      let min_longitude = (longitude -= 0.015 * 1);\n      // Maps.Draw(\n      //   latitude,\n      //   longitude,\n      //   max_latitude,\n      //   min_latitude,\n      //   max_longitude,\n      //   min_longitude\n      // );\n    });\n    console.log(latitude, longitude);\n    Maps.init();\n  }, []);\n\n  const Maps = {\n    item: [],\n    init() {\n      this.getDate();\n    },\n    async getDate() {\n      const data = await (\n        await fetch(\n          `https://api.odcloud.kr/api/15077586/v1/centers?page=1&perPage=400&returnType=json&serviceKey=${Key}`\n        )\n      ).json();\n      SetData(data.data);\n      this.item = data.data;\n    },\n    Draw(lat, long, Maxlat, Minlat, Maxlong, Minlong) {\n      const container = document.getElementById(\"map\");\n\n      const options = {\n        center: new kakao.maps.LatLng(lat, long),\n        level: 3,\n      };\n\n      var map = new kakao.maps.Map(container, options);\n\n      var markerPosition = new kakao.maps.LatLng(lat, long);\n\n      var marker = new kakao.maps.Marker({\n        position: markerPosition,\n      });\n\n      marker.setMap(map); // 마커 지도위에 그리기\n\n      this.item.forEach((item) => {\n        const lat = item.lat;\n        const long = item.lng;\n        // console.log(long);\n\n        if (lat > Minlat && lat < Maxlat) {\n          console.log(item);\n        }\n      });\n    },\n  };\n\n  return (\n    <div className=\"Map_wrap\" style={{ width: \"100%\", height: \"100vh\" }}>\n      <div id=\"map\" style={{ width: \"100%\", height: \"100vh\" }}></div>\n    </div>\n  );\n}\nexport default Vaccination;\n"]},"metadata":{},"sourceType":"module"}